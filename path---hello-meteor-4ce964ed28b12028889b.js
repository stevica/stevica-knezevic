webpackJsonp([0x870cb4da2c0e],{336:function(e,a){e.exports={data:{markdownRemark:{html:'<h2>Hello JavaScript lovers!</h2>\n<p>Today we have a lot of libraries and frameworks written in JavaScript, and it has become a bit chaotic, especially when we want to combine more technologies together. Sometimes it can take a lot of time to set up all these things to work together, and can cause a frustration. Fortunately, our headache disappeared after the arrival of Meteor. Now we can assemble all the pieces into one ecosystem, which allows us to develop application in one language, JavaScript, so cool ;)</p>\n<h2>Short intro about Meteor and its architecture</h2>\n<p><a href="https://www.meteor.com" title="Meteor">Meteor</a> is a full-stack JavaScript platform which is great for modern single-page and mobile applications, it can compile apps into iOS and Android packages, using Apache Cordova and those packages can be installed through the App Store (iOS) and Google Play (Android). Meteor is powered by Node.js on the server side, MongoDB is used to store data. The communication within application goes over both HTTP and WebSocket. The initial request and static files are transferred over HTTP protocol. In that way client is calling a server function which then sends back its response as JSON object over DDP.</p>\n<p>Let’s describe each of these components called Isopacks:</p>\n<h2>DDP</h2>\n<p>Distributed Data Protocol, known as DDP, is dedicated protocol based on JSON. It is websocket-based and is one of the core elements of Meteor. Clients talk to Meteor servers over DDP protocol. On query a server is sending the results down to the client, and then pushing changes to the client when anything changes in the database. DDP is simple to use and can be used with many other programming languages like PHP, Python, Objective-C or Java as well.</p>\n<h2>Livequery</h2>\n<p>Simply put, Livequery is responsible for changes detecting and pushing all changes to the subscribed clients over DDP.</p>\n<h2>Tracker</h2>\n<p>Tracker is powerful library for transparent reactive programming in JavaScript, it provides functional reactive programming (FRP). It watches for those changes and triggers DOM updates in the UI layer via Blaze.</p>\n<h2>DB drivers</h2>\n<p>Blaze is reactive UI library which uses template engine known as Spacebars. If you prefer to work with other libraries or frameworks like Angular, React or Ember, feel free to use them, but Blaze is simpler than any other.</p>\n<h2>DB drivers</h2>\n<p>Meteor comes with database that simulates actual database inside the browser, called Minimongo. On the server side Meteor uses MongoDB.Connection between Minimongo and MongoDB is reactive, data is kept in sync.</p>\n<h2>Setting a project</h2>\n<p>Meteor also supports CLI (Command Line Interface), allows developers to quickly set up an entire development environment like:</p>\n<ul>\n<li>Create new app</li>\n<li>Add/Remove packages</li>\n<li>Run, reset and monitor app</li>\n<li>Access MongoDB shell</li>\n<li>Deploy application</li>\n</ul>\n<p>Meteor supports OSX, Windows and Linux, but I will show you how Meteor can be installed and how it works under Linux. So, open your terminal and simply install latest Meteor release:</p>\n<div class="gatsby-highlight" data-language="shell">\n      <pre class="language-shell"><code class="language-shell">curl https://install.meteor.com/ | sh</code></pre>\n      </div>\n<p>Now you can create a project:</p>\n<div class="gatsby-highlight" data-language="shell">\n      <pre class="language-shell"><code class="language-shell">meteor create myapp</code></pre>\n      </div>\n<p>Meteor creates three files (myapp.css, myapp.html, myapp.js). Now,you can run your application with the following commands:</p>\n<div class="gatsby-highlight" data-language="shell">\n      <pre class="language-shell"><code class="language-shell">cd myapp\nmeteor npm install\nmeteor</code></pre>\n      </div>\n<p>You can access the application with your browser at <a href="http://localhost:3000">http://localhost:3000</a>. If you want to change the port you can do it with following command:</p>\n<div class="gatsby-highlight" data-language="shell">\n      <pre class="language-shell"><code class="language-shell">meteor run --port 8080</code></pre>\n      </div>\n<p>And now you can see your page in your browser at <a href="http://localhost:8080">http://localhost:8080</a>. That was easy, right? :)</p>\n<h2>Benefits of using Meteor</h2>\n<p>If you are using Meteor, you will be able to develop very fast web application. There are a lot of benefits using Meteor framework as following:</p>\n<ul>\n<li>You are able to develop with just one language</li>\n<li>CLI interface</li>\n<li>You are able to build hybrid mobile applications using Apache Cordova</li>\n<li>Integration with smart packages</li>\n<li>By default applications are reactive</li>\n<li>Great and supportive community</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Meteor is one of the best frameworks for one-page app development we have today and I highly recommend you to start using it, because It is completely open source and it’s the easiest and fastest way to create a full stack online application like real time collaboration tools, customer support, multiplayer web games and more. .\nSimply put, Meteor is the future.</p>\n<p><a href="/" title="Go back to the homepage">Go back to the homepage</a></p>',frontmatter:{date:"April 21, 2016",path:"/hello-meteor",title:"Meteor qucik look"}},site:{siteMetadata:{title:"Stevica Knezevic"}}},pathContext:{}}}});
//# sourceMappingURL=path---hello-meteor-4ce964ed28b12028889b.js.map